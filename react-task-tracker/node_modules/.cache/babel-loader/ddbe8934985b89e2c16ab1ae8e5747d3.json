{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ace/Desktop/react/react-task-tracker/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\nimport Footer from './components/Footer';\nimport About from './components/About'; // import { BrowserRouter as Router, Route } from 'react-router-dom'\n\nfunction App() {\n  _s();\n\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks();\n      setTasks(tasksFromServer);\n    };\n\n    getTasks();\n  }, []); // fetch Tasks\n\n  const fetchTasks = async () => {\n    const res = await fetch('http://localhost:5000/tasks');\n    const data = await res.json();\n    return data;\n  }; //Update data in server\n\n\n  const fetchTask = async id => {\n    const res = await fetch(`http://localhost:5000/tasks/${id}`);\n    const data = await res.json();\n    return data;\n  }; // Add Task\n\n\n  const addTask = async task => {\n    const res = await fetch('http://localhost:5000/tasks', {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    });\n    const data = await res.json();\n    setTasks([...tasks, data]);\n  }; // const addTask = (task) =>{\n  //   const id = Math.floor(Math.random() * 1000) + 1\n  //   const newTask = {id, ...task}\n  //   setTasks([...tasks, newTask])\n  // }\n  //Delete Task\n\n\n  const deletetask = async id => {\n    await fetch(`http://localhost:5000/tasks${id}`, {\n      method: 'DELETE'\n    });\n    setTasks(tasks.filter(task => task.id !== id));\n  }; //Toggle Reminder\n  //getting task updating and putting in variable\n\n\n  const toggleReminder = async id => {\n    const taskToToggle = await fetchTask(id);\n    const updTask = { ...taskToToggle,\n      reminder: !taskToToggle.reminder\n    };\n    const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: \"PUT\",\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(updTask)\n    });\n    const data = await res.json(); // change update data reminder \n\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      reminder: data.reminder\n    } : task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        onAdd: () => setShowAddTask(!showAddTask),\n        showAdd: showAddTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n        onAdd: addTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 25\n      }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n        tasks: tasks,\n        onDelete: deletetask,\n        onToggle: toggleReminder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 30\n      }, this) : 'No task to show', /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/about\",\n        component: About\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"pA4snfDjny2P+O1a+6NjXQ6HzBU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/ace/Desktop/react/react-task-tracker/src/App.js"],"names":["useState","useEffect","Header","Tasks","AddTask","Footer","About","App","showAddTask","setShowAddTask","tasks","setTasks","getTasks","tasksFromServer","fetchTasks","res","fetch","data","json","fetchTask","id","addTask","task","method","headers","body","JSON","stringify","deletetask","filter","toggleReminder","taskToToggle","updTask","reminder","map","length"],"mappings":";;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AAEA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB,C,CAEA;;AAGA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,QAAQ,GAAG,YAAY;AAC3B,YAAMC,eAAe,GAAG,MAAMC,UAAU,EAAxC;AACAH,MAAAA,QAAQ,CAACE,eAAD,CAAR;AACD,KAHD;;AAIAD,IAAAA,QAAQ;AAGT,GARQ,EAQN,EARM,CAAT,CAJa,CAeb;;AACA,QAAME,UAAU,GAAG,YAAY;AAC7B,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,6BAAD,CAAvB;AACA,UAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AAEA,WAAOD,IAAP;AAED,GAND,CAhBa,CAwBb;;;AACA,QAAME,SAAS,GAAG,MAAOC,EAAP,IAAc;AAC9B,UAAML,GAAG,GAAG,MAAMC,KAAK,CAAE,+BAA8BI,EAAG,EAAnC,CAAvB;AACA,UAAMH,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AAEA,WAAOD,IAAP;AAED,GAND,CAzBa,CAkCb;;;AACA,QAAMI,OAAO,GAAG,MAAOC,IAAP,IAAgB;AAC9B,UAAMP,GAAG,GAAG,MAAMC,KAAK,CAAC,6BAAD,EACrB;AACEO,MAAAA,MAAM,EAAE,MADV;AAEEC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFX;AAKEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,IAAf;AALR,KADqB,CAAvB;AASA,UAAML,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACAP,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWO,IAAX,CAAD,CAAR;AACD,GAZD,CAnCa,CAmDb;AACA;AACA;AACA;AACA;AACA;;;AACA,QAAMW,UAAU,GAAG,MAAOR,EAAP,IAAc;AAC/B,UAAMJ,KAAK,CAAE,8BAA6BI,EAAG,EAAlC,EAAqC;AAC9CG,MAAAA,MAAM,EAAE;AADsC,KAArC,CAAX;AAGAZ,IAAAA,QAAQ,CAACD,KAAK,CAACmB,MAAN,CAAcP,IAAD,IAAUA,IAAI,CAACF,EAAL,KAAYA,EAAnC,CAAD,CAAR;AACD,GALD,CAzDa,CAgEb;AACA;;;AACA,QAAMU,cAAc,GAAG,MAAOV,EAAP,IAAc;AACnC,UAAMW,YAAY,GAAG,MAAMZ,SAAS,CAACC,EAAD,CAApC;AACA,UAAMY,OAAO,GAAG,EAAE,GAAGD,YAAL;AAAmBE,MAAAA,QAAQ,EAAE,CAACF,YAAY,CAACE;AAA3C,KAAhB;AAEA,UAAMlB,GAAG,GAAG,MAAMC,KAAK,CAAE,+BAA8BI,EAAG,EAAnC,EAAsC;AAC3DG,MAAAA,MAAM,EAAE,KADmD;AAE3DC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFkD;AAK3DC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeK,OAAf;AALqD,KAAtC,CAAvB;AAQA,UAAMf,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB,CAZmC,CAoBnC;;AACAP,IAAAA,QAAQ,CAACD,KAAK,CAACwB,GAAN,CAAWZ,IAAD,IAAUA,IAAI,CAACF,EAAL,KAAYA,EAAZ,GAC3B,EAAE,GAAGE,IAAL;AAAWW,MAAAA,QAAQ,EAAEhB,IAAI,CAACgB;AAA1B,KAD2B,GACYX,IADhC,CAAD,CAAR;AAED,GAvBD;;AAoCA,sBACE,QAAC,MAAD;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE,QAAC,MAAD;AAAQ,QAAA,KAAK,EAAE,MAAMb,cAAc,CAAC,CAACD,WAAF,CAAnC;AAAmD,QAAA,OAAO,EAAEA;AAA5D;AAAA;AAAA;AAAA;AAAA,cADF,EAEGA,WAAW,iBAAI,QAAC,OAAD;AAAS,QAAA,KAAK,EAAEa;AAAhB;AAAA;AAAA;AAAA;AAAA,cAFlB,EAGGX,KAAK,CAACyB,MAAN,GAAe,CAAf,gBAAoB,QAAC,KAAD;AAAO,QAAA,KAAK,EAAEzB,KAAd;AAAqB,QAAA,QAAQ,EAChDkB,UADmB;AACP,QAAA,QAAQ,EAAEE;AADH;AAAA;AAAA;AAAA;AAAA,cAApB,GAC8C,iBAJjD,eAKE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,SAAS,EAAExB;AAAhC;AAAA;AAAA;AAAA;AAAA,cALF,eAME,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;GAnHQC,G;;KAAAA,G;AAqHT,eAAeA,GAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport Header from './components/Header'\nimport Tasks from './components/Tasks'\nimport AddTask from './components/AddTask'\n\nimport Footer from './components/Footer'\nimport About from './components/About'\n\n// import { BrowserRouter as Router, Route } from 'react-router-dom'\n\n\nfunction App() {\n  const [showAddTask, setShowAddTask] = useState(false)\n  const [tasks, setTasks] = useState([])\n\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks()\n      setTasks(tasksFromServer)\n    }\n    getTasks()\n\n\n  }, [])\n\n\n  // fetch Tasks\n  const fetchTasks = async () => {\n    const res = await fetch('http://localhost:5000/tasks')\n    const data = await res.json()\n\n    return data\n\n  }\n\n  //Update data in server\n  const fetchTask = async (id) => {\n    const res = await fetch(`http://localhost:5000/tasks/${id}`)\n    const data = await res.json()\n\n    return data\n\n  }\n\n\n  // Add Task\n  const addTask = async (task) => {\n    const res = await fetch('http://localhost:5000/tasks',\n      {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json'\n        },\n        body: JSON.stringify(task)\n      })\n\n    const data = await res.json()\n    setTasks([...tasks, data])\n  }\n\n\n\n  // const addTask = (task) =>{\n  //   const id = Math.floor(Math.random() * 1000) + 1\n  //   const newTask = {id, ...task}\n  //   setTasks([...tasks, newTask])\n  // }\n  //Delete Task\n  const deletetask = async (id) => {\n    await fetch(`http://localhost:5000/tasks${id}`, {\n      method: 'DELETE',\n    })\n    setTasks(tasks.filter((task) => task.id !== id))\n  }\n\n  //Toggle Reminder\n  //getting task updating and putting in variable\n  const toggleReminder = async (id) => {\n    const taskToToggle = await fetchTask(id)\n    const updTask = { ...taskToToggle, reminder: !taskToToggle.reminder }\n\n    const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: \"PUT\",\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(updTask)\n    })\n\n    const data = await res.json()\n\n\n\n\n\n\n\n    // change update data reminder \n    setTasks(tasks.map((task) => task.id === id ?\n      { ...task, reminder: data.reminder } : task))\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n  return (\n    <Router>\n      <div className=\"container\">\n        <Header onAdd={() => setShowAddTask(!showAddTask)} showAdd={showAddTask} />\n        {showAddTask && <AddTask onAdd={addTask} />}\n        {tasks.length > 0 ? (<Tasks tasks={tasks} onDelete={\n          deletetask} onToggle={toggleReminder} />) : ('No task to show')}\n        <Route path='/about' component={About} />\n        <Footer />\n      </div>\n    </Router>\n\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}