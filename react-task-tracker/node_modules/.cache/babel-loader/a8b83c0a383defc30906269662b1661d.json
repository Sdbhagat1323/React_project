{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ace/Desktop/react/react-task-tracker/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Header from './components/Header';\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\nimport { useState, useEff } from 'react';\n\nfunction App() {\n  _s();\n\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [tasks, setTasks] = useState([]); // Add Task\n\n  const addTask = task => {\n    const id = Math.floor(Math.random() * 1000) + 1;\n    const newTask = {\n      id,\n      ...task\n    };\n    setTasks([...tasks, newTask]);\n  }; //Delete Task\n\n\n  const deletetask = id => {\n    setTasks(tasks.filter(task => task.id !== id));\n  }; //Toggle Reminder\n\n\n  const toggleReminder = id => {\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      reminder: !task.reminder\n    } : task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onAdd: () => setShowAddTask(!showAddTask),\n      showAdd: showAddTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 6\n    }, this), showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n      onAdd: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 22\n    }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n      tasks: tasks,\n      onDelete: deletetask,\n      onToggle: toggleReminder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 27\n    }, this) : 'No task to show']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"pJv+Y5MCSCr2IhD9VGyYxvO8jJs=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/ace/Desktop/react/react-task-tracker/src/App.js"],"names":["Header","Tasks","AddTask","useState","useEff","App","showAddTask","setShowAddTask","tasks","setTasks","addTask","task","id","Math","floor","random","newTask","deletetask","filter","toggleReminder","map","reminder","length"],"mappings":";;;;;AAAA,OAAOA,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,OAAjC;;AAGA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAiCJ,QAAQ,CAAC,KAAD,CAA/C;AAGA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC,CAJa,CAOf;;AACA,QAAMO,OAAO,GAAIC,IAAD,IAAS;AACvB,UAAMC,EAAE,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,IAA3B,IAAmC,CAA9C;AACA,UAAMC,OAAO,GAAG;AAACJ,MAAAA,EAAD;AAAK,SAAGD;AAAR,KAAhB;AACAF,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWQ,OAAX,CAAD,CAAR;AACD,GAJD,CARe,CAaf;;;AACA,QAAMC,UAAU,GAAIL,EAAD,IAAQ;AACzBH,IAAAA,QAAQ,CAACD,KAAK,CAACU,MAAN,CAAcP,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAnC,CAAD,CAAR;AACD,GAFD,CAde,CAkBf;;;AACA,QAAMO,cAAc,GAAIP,EAAD,IAAO;AAC5BH,IAAAA,QAAQ,CAACD,KAAK,CAACY,GAAN,CAAWT,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAZ,GAC7B,EAAE,GAAGD,IAAL;AAAWU,MAAAA,QAAQ,EAAE,CAACV,IAAI,CAACU;AAA3B,KAD6B,GACWV,IAD/B,CAAD,CAAR;AAED,GAHD;;AAIE,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACC,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAE,MAAMJ,cAAc,CAAC,CAACD,WAAF,CAAnC;AAAmD,MAAA,OAAO,EAAEA;AAA5D;AAAA;AAAA;AAAA;AAAA,YADD,EAEEA,WAAW,iBAAI,QAAC,OAAD;AAAU,MAAA,KAAK,EAAEI;AAAjB;AAAA;AAAA;AAAA;AAAA,YAFjB,EAGEF,KAAK,CAACc,MAAN,GAAe,CAAf,gBAAoB,QAAC,KAAD;AAAO,MAAA,KAAK,EAAGd,KAAf;AAAsB,MAAA,QAAQ,EACjDS,UADmB;AACP,MAAA,QAAQ,EAAEE;AADH;AAAA;AAAA;AAAA;AAAA,YAApB,GAC6C,iBAJ/C;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GAhCQd,G;;KAAAA,G;AAkCT,eAAeA,GAAf","sourcesContent":["import Header from './components/Header'\nimport Tasks from './components/Tasks'\nimport AddTask from './components/AddTask'\nimport { useState, useEff } from 'react'\n\n\nfunction App() {\n  const [showAddTask, setShowAddTask] =  useState(false)\n\n\n  const [tasks, setTasks] = useState([\n   \n])\n// Add Task\nconst addTask = (task) =>{\n  const id = Math.floor(Math.random() * 1000) + 1\n  const newTask = {id, ...task}\n  setTasks([...tasks, newTask])\n}\n//Delete Task\nconst deletetask = (id) => {\n  setTasks(tasks.filter((task) => task.id !== id))\n}\n\n//Toggle Reminder\nconst toggleReminder = (id) =>{\n  setTasks(tasks.map((task) => task.id === id ? \n  { ...task, reminder: !task.reminder } : task))\n}\n  return (\n    <div className=\"container\">\n     <Header onAdd={() => setShowAddTask(!showAddTask)} showAdd={showAddTask}/>\n     {showAddTask && <AddTask  onAdd={addTask}/>}\n     {tasks.length > 0 ? (<Tasks tasks= {tasks} onDelete={\n       deletetask} onToggle={toggleReminder} />): ('No task to show')}\n    </div>\n    \n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}