{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ace/Desktop/react/react-task-tracker/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\n\nfunction App() {\n  _s();\n\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks();\n      setTasks(tasksFromServer);\n    };\n\n    getTasks();\n  }, []); // fetch Tasks\n\n  const fetchTasks = async () => {\n    const res = await fetch('http://localhost:5000/tasks');\n    const data = await res.json();\n    return data;\n  }; //Update data in server\n\n\n  const fetchTask = async id => {\n    const res = await fetch(`http://localhost:5000/tasks/${id}`);\n    const data = await res.json();\n    return data;\n  }; // Add Task\n\n\n  const addTask = async task => {\n    const res = await fetch('http://localhost:5000/tasks', {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    });\n    const data = await res.json();\n    setTasks([...tasks, data]);\n  }; // const addTask = (task) =>{\n  //   const id = Math.floor(Math.random() * 1000) + 1\n  //   const newTask = {id, ...task}\n  //   setTasks([...tasks, newTask])\n  // }\n  //Delete Task\n\n\n  const deletetask = async id => {\n    await fetch(`http://localhost:5000/tasks${id}`, {\n      method: 'DELETE'\n    });\n    setTasks(tasks.filter(task => task.id !== id));\n  }; //Toggle Reminder\n  //getting task updating and putting in variable\n\n\n  const toggleReminder = async id => {\n    const taskToToggle = await fetchTask(id);\n    const updTask = { ...taskToToggle,\n      reminder: !taskToToggle.reminder\n    };\n    const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: \"PUT\",\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(updTask)\n    });\n    const data = await res.json(); // change update data rem\n\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      reminder: !task.reminder\n    } : task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onAdd: () => setShowAddTask(!showAddTask),\n      showAdd: showAddTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 6\n    }, this), showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n      onAdd: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 22\n    }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n      tasks: tasks,\n      onDelete: deletetask,\n      onToggle: toggleReminder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 27\n    }, this) : 'No task to show']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"pA4snfDjny2P+O1a+6NjXQ6HzBU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/ace/Desktop/react/react-task-tracker/src/App.js"],"names":["useState","useEffect","Header","Tasks","AddTask","App","showAddTask","setShowAddTask","tasks","setTasks","getTasks","tasksFromServer","fetchTasks","res","fetch","data","json","fetchTask","id","addTask","task","method","headers","body","JSON","stringify","deletetask","filter","toggleReminder","taskToToggle","updTask","reminder","map","length"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport Header from './components/Header'\nimport Tasks from './components/Tasks'\nimport AddTask from './components/AddTask'\n\n\n\nfunction App() {\n  const [showAddTask, setShowAddTask] =  useState(false)\n  const [tasks, setTasks] = useState([])\n\n  useEffect (() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks()\n      setTasks(tasksFromServer)\n    }\n    getTasks()\n\n    \n  }, [])\n\n   \n// fetch Tasks\nconst fetchTasks = async () => {\n      const res = await fetch('http://localhost:5000/tasks')\n      const data = await res.json()\n\n      return data\n\n}\n\n//Update data in server\nconst fetchTask = async (id) => {\n      const res = await fetch(`http://localhost:5000/tasks/${id}`)\n      const data = await res.json()\n\n      return data\n\n}\n\n\n// Add Task\n  const addTask = async (task) => {\n    const res = await fetch('http://localhost:5000/tasks',\n    {\n      method: 'POST',\n      headers: {\n        'content-type':'application/json'\n      },\n      body: JSON.stringify(task)\n    })\n\n    const data = await res.json()\n    setTasks([...tasks, data])\n  }\n\n  \n\n// const addTask = (task) =>{\n//   const id = Math.floor(Math.random() * 1000) + 1\n//   const newTask = {id, ...task}\n//   setTasks([...tasks, newTask])\n// }\n//Delete Task\nconst deletetask = async (id) => {\n  await fetch(`http://localhost:5000/tasks${id}`, {\n    method:'DELETE',\n  })\n  setTasks(tasks.filter((task) => task.id !== id))\n}\n\n//Toggle Reminder\n//getting task updating and putting in variable\nconst toggleReminder = async (id) =>{\n  const taskToToggle = await fetchTask(id) \n  const updTask = {...taskToToggle, reminder: !taskToToggle.reminder}\n\n  const res = await fetch(`http://localhost:5000/tasks/${id}`,{\n    method: \"PUT\",\n    headers: {\n      'Content-type':'application/json'\n    },\n    body: JSON.stringify(updTask)\n  })\n\n  const data = await res.json()\n\n\n\n\n\n\n\n// change update data rem\n  setTasks(tasks.map((task) => task.id === id ? \n  { ...task, reminder: !task.reminder } : task))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n  return (\n    <div className=\"container\">\n     <Header onAdd={() => setShowAddTask(!showAddTask)} showAdd={showAddTask}/>\n     {showAddTask && <AddTask  onAdd={addTask}/>}\n     {tasks.length > 0 ? (<Tasks tasks= {tasks} onDelete={\n       deletetask} onToggle={toggleReminder} />): ('No task to show')}\n    </div>\n    \n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}